//
//  AppDelegate.m
//  FKY
//
//  Created by yangyouyong on 15/9/7.
//  Copyright (c) 2015年 yiyaowang. All rights reserved.
//

#import "AppDelegate.h"
#import "FKYCore.h"
#import "FKYAd.h"
#import "FKYCategories.h"
#import "FKYEnvironmentImpl.h"
#import "FKYTabBarController.h"
#import <RDVTabBarController/RDVTabBarController.h>
#import <MagicalRecord/MagicalRecord.h>

#import "FKYHomeURLMap.h"
#import "FKYAccountURLMap.h"
#import "FKYTabBarControllerURLMap.h"
#import "FKYCartControllerURLMap.h"
#import "FKYShopControllerURLMap.h"
#import "FKYWebURLMap.h"
#import "FKYPurchaseAuthorityURLMap.h"

#import "FKYVersionCheckService.h"
#import "FKYAccountViewController.h"
#import "FKYAccountSchemeProtocol.h"
#import "FKYTabBarSchemeProtocol.h"
#import "FKYCartSchemeProtocol.h"
#import "FKYWebSchemeProtocol.h"
#import "FKYCompanyAptitudeViewController.h"

#import "FKYLoginAPI.h"

#import "UIApplication+BadgeNumber.h"
#import "AppDelegate+BI.h"
#import "AppDelegate+OpenPrivateScheme.h"
#import <BaiduMapAPI_Base/BMKMapManager.h>
#import <TencentOpenAPI/TencentOAuth.h>
#import <TencentOpenAPI/QQApiInterface.h>
#import "WXApi.h"
#import "UIViewController+ToastOrLoading.h"
#import "FKY-Swift.h"
#import "IQKeyboardManager.h"

#import <Bugly/Bugly.h>
#import <AlipaySDK/AlipaySDK.h>
#import "WeiboSDK.h"
#import "FKYStartBlankViewController.h"
#import "FKYPush.h"
#import "NTalker.h"
#import <BlocksKit/BlocksKit+UIKit.h>

#import "YWSpeedUpManager.h"
#import "NSObject+PerformBlock.h"
<<<<<<< HEAD
#import "GLCookieSyncManager.h"
=======
#import "FKYURLProtocol.h"
#import "HJLaunch.h"
#import "AppDelegate+Aspects.h"
>>>>>>> origin/develop

NSString *const weiboAppKey = @"1798267981";
NSString *const appSecret = @"b8dd5ca94e8d3d1cea73674202523d16";


@interface AppDelegate () <RDVTabBarControllerDelegate,QQApiInterfaceDelegate,WXApiDelegate,WeiboSDKDelegate, FKYPushDelegate, UIAlertViewDelegate>

@end


@implementation AppDelegate

#pragma mark - Application Life Cycle

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    [[AFNetworkReachabilityManager sharedManager] startMonitoring];
    
    [NSURLProtocol registerClass:[FKYURLProtocol class]];
    
    // 配置监控日志
    [[WUMonitorConfiguration defaultConfiguration] setUserId:[FKYLoginAPI currentUserId]];
    [[WUMonitorConfiguration defaultConfiguration] setCityName:[FKYLocationService new].currentLoaction.substationName];
    [[WUMonitorConfiguration defaultConfiguration] setAppPrefix:@"yaoex"];
    [[WUMonitorConfiguration defaultConfiguration] setSignatureKey:@"yaoex#uploadlog23j8"];
    
    [[HJLaunch sharedInstance] launchBeforeShowWindowWithOptions:launchOptions];
    
    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
    [self.window setBackgroundColor:[UIColor whiteColor]];
    self.window.rootViewController = [FKYStartBlankViewController new];
    
    [self p_configEnvironments];
    
    // 用于过审加的接口
    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"setHtml"];
    [self p_configViewController];
    [self p_settupURLMaps];
    [self p_setupCoreData];
    [self p_configVendors];
    [self p_configApperace];
    [self p_aspectSettings];
    
    // 版本检查
    [[FKYVersionCheckService shareInstance] checkupdateSuccess:nil failure:nil];
    
    // 自动登录
    [FKYLoginAPI autoLogin];
    
    // 配置全局alert弹窗风格
    [WUAlertViewConfig shared].itemHighlightTextColor = [UIColor whiteColor];
    [WUAlertViewConfig shared].itemHightlightBackgroundColor = UIColorFromRGB(0xff6666);
    [WUAlertViewConfig shared].buttonHeight = 37;
    
    [self configBI];
    NSLog(@"%@",DOCUMENT_PATH);
    
    //推送
    FKYPush *push = [FKYPush sharedInstance];
    [push setup];
    push.delegate = self;
    
    //小能
    [[NTalker standardIntegration] initSDKWithSiteid:@"yp_1000" andSDKKey:@"BE6872EA-39E7-4624-A741-2FE80812C8FA"];
    
    //读取保存在本地的cookies
    [[GLCookieSyncManager sharedManager] loadSavedCookies];
    
    NDC_ADD_SELF_NOBJ(@selector(loginSuccess), FKYLoginSuccessNotification);
    NDC_ADD_SELF_NOBJ(@selector(loginSuccess), FKYAutoLoginSuccessNotification);
    NDC_ADD_SELF_NOBJ(@selector(pushReady), FKYPushReadyNotification);

    [self.window makeKeyAndVisible];
    
    [[HJLaunch sharedInstance] launchAfterShowWindowWithOptions:launchOptions];

    return YES;
}

- (void)applicationWillResignActive:(UIApplication *)application
{
    //
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
    //
}

- (void)applicationWillEnterForeground:(UIApplication *)application
{
    [[FKYVersionCheckService shareInstance] checkupdateSuccess:nil failure:nil];
}

- (void)applicationDidBecomeActive:(UIApplication *)application
{
    NSString *orderId = UD_OB(@"ORDERID_APP_DID_BECOME_ACTIVE");
    dispatch_time_t timer = dispatch_time(DISPATCH_TIME_NOW, 3 * NSEC_PER_SEC);
    dispatch_after(timer, dispatch_get_main_queue(), ^{
        UIViewController *VC = [self topViewController];
        if (([VC isKindOfClass:[FKYCartSubmitViewController class]] ||
             [VC isKindOfClass:[FKYCompanyAptitudeViewController class]])
            && orderId != nil) {
//            [VC showLoading];
            [VC dismissLoading];
            [self openUnpayOrder];
        }
    });
    
    // badge置0
    [application setApplicationBadgeNumber:0];
}

- (void)applicationWillTerminate:(UIApplication *)application
{
    [MagicalRecord cleanUp];
    UD_RM_OB(FKYLocationKey);
    UD_RM_OB(@"currentStation");
    [UD synchronize];
}

- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url
{
//      [UMSocialSnsService handleOpenURL:url];
    [WeiboSDK handleOpenURL:url delegate:self];
    return YES;
}

- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{
    if ([url.absoluteString hasPrefix:@"fky://"]) {
        return [self p_openPriveteScheme:url];
    }
//    return  [UMSocialSnsService handleOpenURL:url];
    return false;
}

- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<NSString *,id> *)options
{
    if ([url.absoluteString hasPrefix:@"fky://"]) {
        return [self p_openPriveteScheme:url];
    }
    
    if ([url.absoluteString hasPrefix:@"tencent"]) {
        [QQApiInterface handleOpenURL:url
                             delegate:self];
    }
    if ([url.absoluteString hasPrefix:@"wx"]) {
        [WXApi handleOpenURL:url
                    delegate:self];
    }
    
    if ([url.absoluteString containsString:@"weibo"]) {
        [WeiboSDK handleOpenURL:url delegate:self];
    }
    // 客户端的回调
    if ([url.host isEqualToString:@"safepay"]) {
        [[AlipaySDK defaultService] processOrderWithPaymentResult:url standbyCallback:^(NSDictionary *resultDic) {
            //【由于在跳转支付宝客户端支付的过程中，商户app在后台很可能被系统kill了，所以pay接口的callback就会失效，请商户对standbyCallback返回的回调结果进行处理,就是在这个方法里面处理跟callback一样的逻辑】
            NSNumber *code = resultDic[@"resultStatus"];
            if (code.integerValue == 9000) {
                [[FKYNavigator sharedNavigator] openScheme:@protocol(FKY_PaySuccess)
                                               setProperty:nil
                                                   isModal:NO
                                                  animated:NO];
            }else{
                if (iOS10Later()) {
                    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"fky://account/allorders"] options:@{} completionHandler:nil];
                }else{
                    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"fky://account/allorders"]];
                }
            }
        }];
    }
    if ([url.host isEqualToString:@"platformapi"]){//支付宝钱包快登授权返回authCode
        [[AlipaySDK defaultService] processAuthResult:url standbyCallback:^(NSDictionary *resultDic) {
            //【由于在跳转支付宝客户端支付的过程中，商户app在后台很可能被系统kill了，所以pay接口的callback就会失效，请商户对standbyCallback返回的回调结果进行处理,就是在这个方法里面处理跟callback一样的逻辑】
            NSLog(@"platformapi  result = %@",resultDic);
        }];
    }
    return YES;
}


#pragma mark - Notifications
#pragma mark 远程通知(推送)回调
/** 远程通知注册成功委托 */
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
    [[FKYPush sharedInstance] application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];
}

#pragma mark APP运行中接收到通知(推送)处理 - iOS 10以下版本收到推送

/** APP已经接收到“远程”通知(推送) - 透传推送消息  */
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler {
    [[FKYPush sharedInstance] application:application didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];
}

#pragma mark iOS 10中收到推送消息

//  iOS 10: App在前台获取到通知
- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler {
    [[FKYPush sharedInstance] userNotificationCenter:center willPresentNotification:notification withCompletionHandler:completionHandler];
}

//  iOS 10: 点击通知进入App时触发
- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)())completionHandler {
    [[FKYPush sharedInstance] userNotificationCenter:center didReceiveNotificationResponse:response withCompletionHandler:completionHandler];
}

#pragma mark FKYPushDelegate
- (void)receiveInfo:(NSDictionary *)info isAlert:(BOOL)isAlert
{
    if (isAlert) {
        [UIAlertView bk_showAlertViewWithTitle:info[@"title"] message:info[@"content"] cancelButtonTitle:@"忽略" otherButtonTitles:@[@"查看详情"] handler:^(UIAlertView *alertView, NSInteger buttonIndex) {
            if (buttonIndex == 1) {
                [self goPushWithUrlString:info[@"url"]];
            }
        }];
    }
    else {
        //跳转
        [self goPushWithUrlString:info[@"url"]];
    }
}

#pragma mark 监听的通知实现
- (void)loginSuccess
{
    [self savePush];
}

- (void)pushReady
{
    [self savePush];
}

#pragma mark 私有方法
- (void)goPushWithUrlString:(NSString *)urlString
{
    //跳转
    if (urlString.length > 0) {
        [self p_openPriveteScheme:[NSURL URLWithString:urlString]];
    }
}

- (void)savePush
{
    FKYPush *push = [FKYPush sharedInstance];
    //保存推送信息
    if (push.deviceToken.length > 0
        && push.clientId.length > 0
        && [FKYLoginAPI currentUserId].length > 0) {
        [[FKYVersionCheckService shareInstance] savePushWithClientid:push.clientId devicetoken:push.deviceToken success:nil failure:nil];
    }
}

#pragma mark - Private Method

//获取当前屏幕显示的viewcontroller
- (UIViewController *)topViewController
{
    UIViewController *resultVC;
    resultVC = [self _topViewController:[[UIApplication sharedApplication].keyWindow rootViewController]];
    while (resultVC.presentedViewController) {
        resultVC = [self _topViewController:resultVC.presentedViewController];
    }
    return resultVC;
}

- (UIViewController *)_topViewController:(UIViewController *)vc
{
    if ([vc isKindOfClass:[UINavigationController class]]) {
        return [self _topViewController:[(UINavigationController *)vc topViewController]];
    } else if ([vc isKindOfClass:[UITabBarController class]]) {
        return [self _topViewController:[(UITabBarController *)vc selectedViewController]];
    } else {
        return vc;
    }
    return nil;
}

- (void)p_configEnvironments {
    FKYInternalSetDefaultEnvironment([[FKYEnvironmentImpl alloc] init]);
    [[FKYNetworkManager defaultManager] updateURLSessionConfiguration:[NSURLSessionConfiguration ephemeralSessionConfiguration]];
}

- (void)p_configViewController {
    self.tabBarController = [FKYTabBarController shareInstance];
    self.tabBarController.delegate = self;
    [FKYNavigator sharedNavigator].rootViewController = self.tabBarController;
    self.tabBarController.navigationController.navigationBarHidden = YES;
    [FKYAdAPI showSplashWithStyle:SplashStyleFullScreen
                 onViewController:self.tabBarController
                        completed:^{
//                            [self.tabBarController checkUpdate];
                            [[FKYVersionCheckService shareInstance] setIsCompleteSetUpTabBar:YES];
                        }];
}

- (void)p_settupURLMaps {
    [FKYNavigator configGlobalScheme:@"fyk"];
    [FKYNavigator configGlobalHost:@"com.111.fky"];
    [[FKYNavigator sharedNavigator] addURLMap:[[FKYHomeURLMap alloc] init]];
    [[FKYNavigator sharedNavigator] addURLMap:[[FKYAccountURLMap alloc] init]];
    [[FKYNavigator sharedNavigator] addURLMap:[[FKYTabBarControllerURLMap alloc] init]];
    [[FKYNavigator sharedNavigator] addURLMap:[[FKYCartControllerURLMap alloc] init]];
    [[FKYNavigator sharedNavigator] addURLMap:[[FKYShopControllerURLMap alloc] init]];
    [[FKYNavigator sharedNavigator] addURLMap:[[FKYWebURLMap alloc] init]];
    [[FKYNavigator sharedNavigator] addURLMap:[[FKYPurchaseAuthorityURLMap alloc] init]]; // 加入URLMap
}

- (void)p_configApperace {
    // 导航条
    UINavigationBar *navigationBar = [UINavigationBar appearance];
    [navigationBar setBackgroundImage:[UIImage FKY_imageWithColor:UIColorFromRGB(0xf54b41)]
                        forBarMetrics:UIBarMetricsDefault];
    NSShadow *shadow = [[NSShadow alloc] init];
    shadow.shadowColor = [UIColor clearColor];
    shadow.shadowOffset = CGSizeZero;
    [navigationBar setTitleTextAttributes:@{
                                            NSFontAttributeName : FKYSystemFont(FKYWH(17)),
                                            NSForegroundColorAttributeName : [UIColor whiteColor],
                                            NSShadowAttributeName : shadow
                                            }];
    // 状态栏
    [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];
}

- (void)p_setupCoreData {
    [MagicalRecord setDefaultModelNamed:@"FKY.momd"];
    [MagicalRecord setupCoreDataStackWithAutoMigratingSqliteStoreNamed:@"fky.sqlite"];
}

- (void)p_configVendors {
    [WeiboSDK enableDebugMode:YES];
    [WeiboSDK registerApp:weiboAppKey];
    
    // 微信分享
    [WXApi registerApp:@"wx83e3bc83ebc8b457"];
    
    // 百度地图
    BMKMapManager *mapManager = [[BMKMapManager alloc]init];
    [mapManager start:@"vGaXoGLvp8DW2uZhVqawyYmM"
      generalDelegate:nil];
    
    // QQ分享
    id qShare = [[TencentOAuth alloc] initWithAppId:@"1104849171"
                                        andDelegate:nil];
    NSLog(@"qq share object: %@", qShare);
    
#if FKY_ENVIRONMENT_MODE == 1   // 线上环境
    // Bugly异常框架
    [Bugly startWithAppId:@"837b12a1e6"];
#endif
}

#pragma mark - Delegates
#pragma mark RDVTabBarControllerDelegate
- (void)tabBarController:(RDVTabBarController *)tabBarController didSelectViewController:(UIViewController *)viewController{
    switch (tabBarController.selectedIndex) {
        case 0://首页
            [[NSNotificationCenter defaultCenter] postNotificationName:FKYTabBarTouchUpdateHomeNotification object:nil];
            break;
        case 1://订单页
            break;
        case 2://个人中心
            break;
        case 3://个人中心
            break;
        default:
            break;
    }
}

- (void)paySuccess {
    UD_RM_OB(@"ORDERID_APP_DID_BECOME_ACTIVE");
    [[FKYNavigator sharedNavigator] openScheme:@protocol(FKY_PaySuccess)
                                   setProperty:nil
                                       isModal:NO
                                      animated:NO];
}

- (void)openUnpayOrder {
    UD_RM_OB(@"ORDERID_APP_DID_BECOME_ACTIVE");
    [[FKYNavigator sharedNavigator] openScheme:@protocol(FKY_TabBarController) setProperty:^(FKYTabBarController* destinationViewController) {
        destinationViewController.index = 3;
        [[FKYNavigator sharedNavigator] openScheme:@protocol(FKY_AllOrderController) setProperty:^(FKYAllOrderViewController *destinationViewController) {
            destinationViewController.status = @"1";
        }];
    }];
}

/**
 处理来至QQ的请求
 */
- (void)onReq:(QQBaseReq *)req {
    
}

/**
 处理QQ在线状态的回调
 */
- (void)isOnlineResponse:(NSDictionary *)response {
    
}

- (void)onResp:(id)resp {
    NSString *successCode = @"分享成功";
    if ([resp isKindOfClass:QQBaseResp.class]) {
        QQBaseResp *response = (QQBaseResp *)resp;
        if (response.result.integerValue == 0 ) {
            [self.tabBarController toast:successCode];
        }
    }
    if ([resp isKindOfClass:BaseResp.class]) {
        BaseResp *response = (BaseResp *)resp;
        if (response.errCode == 0 ) {
            [self.tabBarController toast:successCode];
        }
//        (response.errCode == 0 )? [self.tabBarController toast:successCode] : nil ;
    }
    
    if ([resp isKindOfClass:PayResp.class]) {
        PayResp * result = resp;
        if (result && result.errStr.length>0) {
            [self.tabBarController toast:result.errStr];
        }
        switch (result.errCode) {
            case WXSuccess:
                [self paySuccess];
                break;
            case WXErrCodeCommon:
                [self openUnpayOrder];
                break;
            case WXErrCodeUserCancel:
                [self openUnpayOrder];
                break;
            case WXErrCodeSentFail:
                [self openUnpayOrder];
                break;
            case WXErrCodeAuthDeny:
                [self openUnpayOrder];
                break;
            case WXErrCodeUnsupport:
                [self openUnpayOrder];
//                [self.tabBarController toast:@"支付失败"];
                break;
            default:
                break;
        }
    }
}

// 搜到微博的响应
- (void)didReceiveWeiboResponse:(WBBaseResponse *)response {
    if ([response isKindOfClass:WBSendMessageToWeiboResponse.class])
    {
        WBSendMessageToWeiboResponse *sendMessageToWeiboResponse = (WBSendMessageToWeiboResponse*)response;
        NSString *accessToken = [sendMessageToWeiboResponse.authResponse accessToken];
        if (accessToken)
        {
            self.weiboToken = accessToken;
        }
        NSString *userID = [sendMessageToWeiboResponse.authResponse userID];
        if (userID) {
            self.wbCurrentUserID = userID;
        }
    }
    else if ([response isKindOfClass:WBAuthorizeResponse.class])
    {
        self.weiboToken = [(WBAuthorizeResponse *)response accessToken];
        self.wbCurrentUserID = [(WBAuthorizeResponse *)response userID];
    }
    else if ([response isKindOfClass:WBSDKAppRecommendResponse.class])
    {
        NSString *title = NSLocalizedString(@"邀请结果", nil);
        NSString *message = [NSString stringWithFormat:@"accesstoken:\n%@\nresponse.StatusCode: %d\n响应UserInfo数据:%@\n原请求UserInfo数据:%@",[(WBSDKAppRecommendResponse *)response accessToken],(int)response.statusCode,response.userInfo,response.requestUserInfo];
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title
                                                        message:message
                                                       delegate:nil
                                              cancelButtonTitle:NSLocalizedString(@"确定", nil)
                                              otherButtonTitles:nil];
        [alert show];
    }
    else if ([response isKindOfClass:WBShareMessageToContactResponse.class])
    {
        WBShareMessageToContactResponse *shareMessageToContactResponse = (WBShareMessageToContactResponse*)response;
        NSString *accessToken = [shareMessageToContactResponse.authResponse accessToken];
        if (accessToken)
        {
            self.weiboToken = accessToken;
        }
        NSString *userID = [shareMessageToContactResponse.authResponse userID];
        if (userID) {
            self.wbCurrentUserID = userID;
        }
    }
}

- (void)didReceiveWeiboRequest:(WBBaseResponse *)response {
    
}


@end
